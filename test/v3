#!/usr/bin/env bash

export BUILDPACK_HOME="${BUILDPACK_HOME:-$(pwd)}"

testDetect() {
  local buildPlan
  buildPlan="$(mktemp)"
  detect "${PLATFORM_DIR}" "${buildPlan}"

  assertAppDetected "JVM"
  assertFileExists "${buildPlan}"
  assertFileContains "version = \"${DEFAULT_JDK_1_8_VERSION}\"" "${buildPlan}"
}

testDetect_jdk11() {
  echo "java.runtime.version=11" >"${BUILD_DIR}/system.properties"
  local buildPlan
  buildPlan="$(mktemp)"
  detect "${PLATFORM_DIR}" "${buildPlan}"

  assertAppDetected "JVM"
  assertFileExists "${buildPlan}"
  assertFileContains "version = \"${DEFAULT_JDK_11_VERSION}\"" "${buildPlan}"
}

testDetect_jdk11_0_4() {
  echo "java.runtime.version=11.0.4" >"${BUILD_DIR}/system.properties"
  local buildPlan
  buildPlan="$(mktemp)"
  detect "${PLATFORM_DIR}" "${buildPlan}"

  assertAppDetected "JVM"
  assertFileExists "${buildPlan}"
  assertFileContains "version = \"11.0.4\"" "${buildPlan}"
}

test_get_jdk_cache_id() {
  assertEquals "$(get_jdk_cache_id "https://buildpacks.drycc.cc/jvm/jdk/heroku-18/openjdk1.8.0_222.tar.gz")" "6791478b25aa569027e4b4e200b94271"
}

test_get_jdk_cache_id_date() {
  assertContains "$(get_jdk_cache_id "https://example.org")" "UTC 20"
}

test_build() {
  build
  assertCapturedSuccess
  assertCaptured "JDK 1.8 installed"
  assertCaptured "JRE 1.8 installed"
  assertFileExists "${LAYERS_DIR}/jdk/bin/java"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jvmcommon.sh"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jdbc.sh"
}

test_build_jdk_7() {
  echo "java.runtime.version=1.7.0_222" >"${BUILD_DIR}/system.properties"
  build
  assertCapturedSuccess
  assertCaptured "JDK 1.7.0_222 installed"
  assertCaptured "JRE 1.7.0_222 installed"
  assertFileExists "${LAYERS_DIR}/jdk/bin/java"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jvmcommon.sh"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jdbc.sh"
}

test_build_jdk_11() {
  echo "java.runtime.version=11" >"${BUILD_DIR}/system.properties"
  build
  assertCapturedSuccess
  assertCaptured "JDK 11 installed"
  assertFileExists "${LAYERS_DIR}/jdk/bin/java"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jvmcommon.sh"
  assertFileExists "${LAYERS_DIR}/jdk/profile.d/jdbc.sh"
}

test_install_jdk_valid() {
  export HEROKU_GPG_VALIDATION=1
  capture install_jdk "https://buildpacks.drycc.cc/jvm/jdk/heroku-18/openjdk11.0.4.tar.gz" "$(mktemp -d)" "${BUILDPACK_HOME}"
  assertCapturedSuccess
  unset HEROKU_GPG_VALIDATION
}

test_install_jdk_invalid() {
  rm -f ~/.gnupg/pubring.kbx
  local key
  key="$(mktemp)"
  curl -sf -o "${key}" -L "https://www.php.net/distributions/php-keyring.gpg"
  export HEROKU_GPG_VALIDATION=1
  capture install_jdk "https://buildpacks.drycc.cc/jvm/jdk/heroku-18/openjdk11.0.4.tar.gz" "$(mktemp -d)" "${BUILDPACK_HOME}" "${key}"
  assertCapturedError " !     ERROR: Invalid GPG signature!"
  unset HEROKU_GPG_VALIDATION
}

# the modules to be tested
# shellcheck source=/lib/v3/common.sh
source "${BUILDPACK_HOME}/lib/v3/common.sh"
# shellcheck source=/lib/jvm.sh
source "${BUILDPACK_HOME}/lib/jvm.sh"

# testing utils
# shellcheck source=/test/utils
source "${BUILDPACK_HOME}/test/utils"

# import the testing framework
# shellcheck source=/test/vendor/shunit2
source "${BUILDPACK_HOME}/test/vendor/shunit2"
